# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

name: $(Date:yyyyMMdd)$(Rev:.r)

trigger:
  - master
  - develop
  - release/*
  - hotfix/*
  - feature/*

pr:
  - master
  - develop
  - release/*

variables:
  profileProd: prod
  frontendArtifact: Frontend
  frontendDir: app/frontend
  ubuntu: Ubuntu-18.04

resources:
  containers:
    - container: openjdk
      image: openjdk:8-slim

    - container: node
      image: node:lts-slim

stages:
  - stage: analyze_test_build
    displayName: 'Analyze, test, build'
    jobs:
      - job: Backend
        pool:
          vmImage: $(ubuntu)

        container: openjdk

        steps:
          - script: printenv
          - script: './gradlew junitPlatformTest'
            displayName: 'Test Backend'

      - job: Frontend
        pool:
          vmImage: $(ubuntu)

        steps:
          - script: printenv
          - task: NodeTool@0
            displayName: 'Setup environment'
            inputs:
              versionSpec: '10.x'

          - script: npm ci
            displayName: 'Install dependencies'
            workingDirectory: $(frontendDir)

          - script: npm run lint
            displayName: 'Lint'
            workingDirectory: $(frontendDir)

          - script: npm run test -- --watch=false
            displayName: 'Run tests'
            workingDirectory: $(frontendDir)

          - script: npm run build:prod
            displayName: 'Build frontend'
            workingDirectory: $(frontendDir)

          - publish: $(System.DefaultWorkingDirectory)/app/frontend/dist/frontend
            displayName: 'Publish Frontend'
            artifact: $(frontendArtifact)

  - stage: build
    displayName: 'Build / Package'
    jobs:
      - job: Package

        pool:
          vmImage: $(ubuntu)

        container: openjdk

        steps:
          - script: printenv
          - download: current
            artifact: $(FrontendArtifact)
            displayName: 'Download Frontend'

          - task: CopyFiles@2
            displayName: 'Copy Frontend to java resources'
            inputs:
              sourceFolder: $(Pipeline.Workspace)/$(frontendArtifact)
              targetFolder: "app/starter/src/main/resources/public/app"

          - script: ./gradlew :app:starter:bootJar
            displayName: 'Package App'
            env:
              spring_profiles_active: $(profileProd)

          - publish: $(System.DefaultWorkingDirectory)/app/starter/build/libs
            displayName: 'Publish Jar'
            artifact: 'PSA Java'