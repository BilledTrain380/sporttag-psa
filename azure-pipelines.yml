# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

name: $(Date:yyyyMMdd)$(Rev:.r)

trigger:
  - master
  - develop
  - release/*

pr:
  - master
  - develop
  - release/*
  - epic/*

variables:
  profileProd: prod
  psaJavaArtifact: psaJava
  psaMacosArtifact: psaMacos
  frontendArtifact: Frontend
  frontendDir: app/frontend
  ubuntu: Ubuntu-18.04
  macos: macOS-10.15
  javaVersion: 1.14

stages:
  - stage: analyze_test_build
    displayName: 'Analyze, test, build'
    jobs:
      - job: Backend
        pool:
          vmImage: $(ubuntu)

        steps:
          - script: printenv
          - task: Gradle@2
            displayName: 'Analyze / Test backend'
            inputs:
              javaHomeOption: JDKVersion
              jdkVersionOption: $(javaVersion)
              jdkArchitectureOption: x64
              options: "-i"
              tasks: 'ktlintCheck test jacocoTestReport sonarqube'
            env:
              SONAR_LOGIN: $(SONAR_LOGIN)
              SYSTEM_PULLREQUEST_SOURCEBRANCH: $(SYSTEM_PULLREQUEST_SOURCEBRANCH)
              SYSTEM_PULLREQUEST_TARGETBRANCH: $(SYSTEM_PULLREQUEST_TARGETBRANCH)
              BUILD_SOURCEBRANCHNAME: $(BUILD_SOURCEBRANCHNAME)

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/TEST-*.xml'

      - job: Frontend
        pool:
          vmImage: $(ubuntu)

        steps:
          - task: NodeTool@0
            displayName: 'Setup NodeJS'
            inputs:
              versionSpec: '10.x'
          - script: printenv

          - script: npm ci
            displayName: 'Install dependencies'
            workingDirectory: $(frontendDir)

          - script: npm run lint
            displayName: 'Lint'
            workingDirectory: $(frontendDir)

          - script: npm run test -- --watch=false
            displayName: 'Run tests'
            workingDirectory: $(frontendDir)

          - script: npm run build:prod
            displayName: 'Build frontend'
            workingDirectory: $(frontendDir)

          - publish: $(System.DefaultWorkingDirectory)/app/frontend/dist/frontend
            displayName: 'Publish Frontend'
            artifact: $(frontendArtifact)

  - stage: build
    displayName: 'Build / Package'
    jobs:
      - job: Package

        pool:
          vmImage: $(ubuntu)

        steps:
          - task: Gradle@2
            displayName: 'Setup Gradle'
            inputs:
              javaHomeOptions: JDKVersion
              jdkVersionOption: $(javaVersion)
              jdkArchitecture: x64
          - script: printenv

          - download: current
            artifact: $(frontendArtifact)
            displayName: 'Download Frontend'

          - task: CopyFiles@2
            displayName: 'Copy Frontend to java resources'
            inputs:
              sourceFolder: $(Pipeline.Workspace)/$(frontendArtifact)
              targetFolder: "app/psa-web/src/main/resources/public/app"

          - script: ./gradlew :app:starter:bootJar
            displayName: 'Package App'

          - publish: $(System.DefaultWorkingDirectory)/app/starter/build/libs
            displayName: 'Publish Jar'
            artifact: $(psaJavaArtifact)

      - job: Package macos native

        pool:
          vmImage: $(macos)

        steps:
          - task: Gradle@2
            displayName: 'Setup Environment'
            name: Versions
            inputs:
              javaHomeOption: JDKVersion
              jdkVersionOption: $(javaVersion)
              jdkArchitectureOption: x64
              tasks: 'setPipelineVariables'

          - script: printenv

          - download: current
            artifact: $(frontendArtifact)
            displayName: 'Download Frontend'

          - task: CopyFiles@2
            displayName: 'Copy Frontend to java resources'
            inputs:
              sourceFolder: $(Pipeline.Workspace)/$(frontendArtifact)
              targetFolder: "app/psa-web/src/main/resources/public/app"

          - script: ./gradlew :app:desktop-starter:bootJar
            displayName: 'Package Desktop App'

          - task: CopyFiles@2
            displayName: 'Copy desktop jar to distribution'
            inputs:
              sourceFolder: $(System.DefaultWorkingDirectory)/app/desktop/starter/build/libs/*.jar
              targetFolder: $(System.DefaultWorkingDirectory)/distribution/desktop/build/libs

          - task: CopyFiles@2
            displayName: 'Copy license to distribution'
            inputs:
              sourceFolder: $(System.DefaultWorkingDirectory)
              contents: LICENSE.md
              targetFolder: $(System.DefaultWorkingDirectory)/distribution/desktop/build/resources

          - task: Bash@3
            displayName: 'Package PSA-Desktop for macos'
            inputs:
              filePath: $(System.DefaultWorkingDirectory)/distribution/desktop/package-macos.sh
              workingDirectory: $(System.DefaultWorkingDirectory)/distribution/desktop
              arguments: $(fullVersion)

          - publish: $(System.DefaultWorkingDirectory)/distribution/desktop/build/libs/*.dmg
            displayName: 'Publish dmg'
            artifact: $(psaMacosArtifact)

  - stage: e2e_tests
    displayName: 'e2e tests'
    jobs:
      - job: psa
        displayName: 'PSA'

        pool:
          vmImage: $(ubuntu)

        steps:
          - task: Gradle@2
            displayName: 'Setup Environment'
            name: Versions
            inputs:
              javaHomeOptions: JDKVersion
              jdkVersionOption: $(javaVersion)
              jdkArchitecture: x64
              tasks: 'setPipelineVariables'

          - download: current
            artifact: $(psaJavaArtifact)
            displayName: 'Download PSA Java'

          - task: CopyFiles@2
            displayName: 'Copy PSA Java to distributions'
            inputs:
              sourceFolder: $(Pipeline.Workspace)/$(psaJavaArtifact)
              contents: '*.jar'
              targetFolder: "distribution/docker/psa-test"

          - script: 'docker build -t billedtrain380/psa:$(dockerTag) --build-arg PSA_VERSION=$(fullVersion) .'
            displayName: 'Build Test Docker Image'
            workingDirectory: distribution/docker/psa-test/

          - script: 'docker run -d --name psa-test -p 8080:8080 billedtrain380/psa:$(dockerTag)'
            displayName: 'Run docker psa-test'

          - task: NodeTool@0
            displayName: 'Setup NodeJS'
            inputs:
              versionSpec: '10.x'
          - script: printenv

          - script: npm ci
            displayName: 'Install dependencies'
            workingDirectory: $(frontendDir)

          - script: 'npm run e2e:ci'
            displayName: 'Run e2e tests'
            workingDirectory: $(frontendDir)
            env:
              BROWSERSTACK_USER: $(BROWSERSTACK_USER)
              BROWSERSTACK_KEY: $(BROWSERSTACK_KEY)
              FULL_VERSION: $(fullVersion)

          - script: 'docker stop psa-test && docker rm psa-test'

  - stage: release
    displayName: 'Release'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
      - job: setup
        displayName: 'Setup environment'

        pool:
          vmImage: $(ubuntu)

        steps:
          - task: Gradle@2
            displayName: 'Setup Environment'
            name: Versions
            inputs:
              javaHomeOptions: JDKVersion
              jdkVersionOption: 1.11
              jdkArchitecture: x64
              tasks: 'setPipelineVariables'

      - job: build_push_docker_image
        displayName: 'Build / Push Docker Image'
        dependsOn: setup

        pool:
          vmImage: $(ubuntu)

        variables:
          version: $[ dependencies.setup.outputs['Versions.version'] ]
          fullVersion: $[ dependencies.setup.outputs['Versions.fullVersion'] ]
          dockerTag: $[ dependencies.setup.outputs['Versions.dockerTag'] ]

        steps:
          - script: printenv
          - script: |
              echo "PSA version: $(version)"
              echo "PSA full version: $(fullVersion)"
              echo "PSA docker tag: $(dockerTag)"
            displayName: Print Versions

          - script: |
              if [[ $(version) == *-SNAPSHOT ]];then
                exit 1
              else
                exit 0
              fi
            displayName: Check version for SNAPSHOT
            failOnStderr: true

          - download: current
            artifact: $(psaJavaArtifact)
            displayName: 'Download PSA Java'

          - task: CopyFiles@2
            displayName: 'Copy PSA Java to distributions'
            inputs:
              sourceFolder: $(Pipeline.Workspace)/$(psaJavaArtifact)
              contents: '*.jar'
              targetFolder: "distribution/docker/psa"

          - task: Docker@2
            displayName: Login to Docker Hub
            inputs:
              command: login
              containerRegistry: 'BilledTrain380 Docker Hub'

          - task: Docker@2
            displayName: 'Build Docker Image'
            inputs:
              command: build
              containerRegistry: 'BilledTrain380 Docker Hub'
              repository: 'billedtrain380/psa'
              buildContext: distribution/docker/psa/
              arguments: '--build-arg PSA_VERSION=$(fullVersion)'
              tags: '$(dockerTag)'

          - task: Docker@2
            displayName: 'Push Docker Image'
            inputs:
              command: push
              containerRegistry: 'BilledTrain380 Docker Hub'
              repository: 'billedtrain380/psa'
              tags: '$(dockerTag)'

      - job: github_release
        displayName: 'Github Release'
        dependsOn: setup

        pool:
          vmImage: $(ubuntu)

        variables:
          version: $[ dependencies.setup.outputs['Versions.version'] ]
          fullVersion: $[ dependencies.setup.outputs['Versions.fullVersion'] ]
          dockerTag: $[ dependencies.setup.outputs['Versions.dockerTag'] ]

        steps:
          - script: printenv
          - script: |
              echo "PSA version: $(version)"
              echo "PSA full version: $(fullVersion)"
              echo "PSA docker tag: $(dockerTag)"
            displayName: Print Versions

          - download: current
            artifact: $(psaJavaArtifact)
            displayName: 'Download PSA Java'

          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: $(Pipeline.Workspace)/$(psaJavaArtifact)
              includeRootFolder: false
              archiveFile: $(Build.ArtifactStagingDirectory)/PSA_Java-$(versionFull).zip

          - task: GitHubRelease@1
            inputs:
              gitHubConnection: 'BilledTrain380'
              action: 'create'
              tagSource: 'manual'
              tag: $(version)
              title: PSA $(version)
              releaseNotsFile: $(System.DefaultWorkingDirectory)/RelNotes/$(version).md
              assets: $(Build.ArtifactStagingDirectory)/PSA_Java-$(versionFull).zip
              addChangeLog: false
