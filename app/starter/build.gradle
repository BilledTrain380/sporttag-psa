mainClassName = "ch.schulealtendorf.sporttagpsa.SporttagPsaApplicationKt"

bootJar {
    archiveFileName = "PSA-${archiveVersion.get()}+$commitHash.${archiveExtension.get()}"
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    maven {
        url "https://jaspersoft.jfrog.io/jaspersoft/jr-ce-releases"
    }
    maven { url "http://dl.bintray.com/jetbrains/spek" }
    maven { url "https://dl.bintray.com/kotlin/kotlin-dev/" }
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-devtools"

    implementation "io.jsonwebtoken:jjwt"
    implementation "joda-time:joda-time"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"

    implementation project(":app:core")
    implementation project(':app:shared')
    implementation project(':app:dto')

    // database dependencies
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.flywaydb:flyway-core"
    runtime "com.h2database:h2"


    implementation "org.springframework.cloud:spring-cloud-starter-oauth2"
    implementation "org.springframework.security:spring-security-jwt"

    implementation "org.passay:passay"
    implementation "net.sourceforge.nekohtml:nekohtml"

    // webjars
    implementation "org.webjars:jquery"
    implementation "org.webjars:bootstrap"
    implementation "org.webjars:font-awesome"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

// task processWebapp(type: Copy) {
//     dependsOn ':app:psa-kitten:build'
//     mustRunAfter "processResources"
//     from 'app/psa-kitten/dist'
//     into 'app/starter/build/resources/main/public/app'
// }

// bootJar.dependsOn("processWebapp")


// Rename to just the project name in order to get it found by parcl.
task renameBootDist {
    doLast {
        def dist = file("build/install/${project.name}")
        if (dist.exists()) {
            dist.delete()
        }
        file("build/install/${project.name}-boot").renameTo(file("build/install/${project.name}"))
    }
    mustRunAfter("installBootDist")
}