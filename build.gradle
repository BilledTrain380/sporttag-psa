ext {
    commitHash = "git rev-parse --short HEAD".execute().text
    isReleaseBuild = version != null && !version.toString().toLowerCase().contains("snapshot")
}

task printCommitHash {
    doLast {
        print commitHash
    }
}

task printVersion {
    doLast {
        print version
    }
}

task printFullVersion {
    doLast {
        print "$version+$commitHash"
    }
}

task printDockerTag {
    doLast {
        print "$version-g$commitHash"
    }
}

group = "ch.schulealtendorf.psa"

allprojects() {
    group = project.rootProject.group
    repositories {
        mavenCentral()
    }
}

// Check if release files are ready
task prepareRelease(type: Copy) {
    if (!isReleaseBuild) {
        return
    }

    def errors = []

    // Check release notes
    def releaseNotes = file("RelNotes/${version}.md")
    if (!releaseNotes.exists()) {
        errors.add("Release notes for version ${version} do not exist")
    }

    // Check Changelog
    def changelogError = "Changelog is missing release version ${version}"
    errors.add(changelogError)
    file("CHANGELOG.md").eachLine { line ->
        if (line.matches("## \\[${version}] - \\d{4}-\\d{2}-\\d{2}")) {
            errors.remove(changelogError)
        }
    }

    if (errors.size() > 0) {
        errors.forEach { error -> println(error) }
        throw new RuntimeException("Some release files are not correct. Check the log output for more information!")
    }

    from file("RelNotes/${version}.md")
    into file("app/starter/build/libs")
}